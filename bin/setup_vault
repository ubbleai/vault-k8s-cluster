#!/bin/zsh

set -e

SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"

pushd $SCRIPTPATH/..

email=$(git config user.email)

if [[ "$email" == "" ]]; then
  print -nP "%F{red}We need an email for certifying domains through let'sencrypt "
  print  -P " and for that we use ... git email, which is empty."
  print  -P "Please configure it using the following command:"
  print  -p "%F{blue}git config --global user.email my-email@address.io%f"
  exit 1
fi

color=blue

export VAULT_HOST=$(echo $VAULT_ADDR | sed -E 's#https?://([0-9\.a-z]+).*#\1#')

unset VAULT_ADDR

print -nP "%F{$color}"
print -nP "Cleaning previous certificates..."
rm -rf *.pem *.csr *.bak tmp stdout stderr acl_agent_token.json 2>&1 >/dev/null || true
mkdir -p tmp
print -P "%F{green}done%F{$color}"

print -nP "Generating root CA for internal tls communication... "
cfssl gencert -initca ca/ca-csr.json 2>/dev/null | cfssljson -bare ca 2>&1 >/dev/null
print -P "%F{green}done%F{$color}"

print -nP "Generating consul certificates... "
cfssl gencert \
  -ca=ca.pem \
  -ca-key=ca-key.pem \
  -config=ca/ca-config.json \
  -profile=default \
  ca/consul-csr.json 2>/dev/null | cfssljson -bare consul 2>&1 >/dev/null
print -P "%F{green}done%F{$color}"

print -nP "Generating vault certificates... "
cat ca/vault-csr.json | sed -E "s/VAULT_HOST/$VAULT_HOST/" > tmp/vault-csr.json
cfssl gencert \
  -ca=ca.pem \
  -ca-key=ca-key.pem \
  -config=ca/ca-config.json \
  -profile=default \
  tmp/vault-csr.json 2>/dev/null | cfssljson -bare vault 2>&1 >/dev/null
print -P "%F{green}done%F{$color}"

CLUSTER_NAME=$(kubectl config current-context)

kubectl create configmap cluster-config \
  --from-literal=CLUSTER_NAME=$CLUSTER_NAME \
  --from-literal=VAULT_ADDR=https://$VAULT_HOST

GOSSIP_ENCRYPTION_KEY=$(consul keygen)
print -P  "%F{yellow}GOSSIP_ENCRYPTION_KEY%F{$color}=%F{magenta}$GOSSIP_ENCRYPTION_KEY%F{$color}"
print -P  "Generated a gossip encryption key and creating consul secret, "
print -nP "with consul certificates and gossip encryption key... "
kubectl create secret generic consul \
  --from-literal="gossip-encryption-key=${GOSSIP_ENCRYPTION_KEY}" \
  --from-file=ca.pem \
  --from-file=consul.pem \
  --from-file=consul-key.pem 2>&1 >/dev/null
print -P "%F{green}done%F{$color}"

print -nP "Creating consul configmap from %F{yellow}configs/consul.json%F{$color} config file... "
kubectl create configmap consul --from-file=configs/consul.json 2>&1 >/dev/null
print -P "%F{green}done.%F{$color}"

print -nP "Creating consul service from %F{yellow}services/consul.yaml%F{$color} file... "
kubectl create -f services/consul.yaml 2>&1 >/dev/null
print -P "%F{green}done.%F{$color}"

print -nP "Creating consul statefulset from %F{yellow}statefulsets/consul.yaml%F{$color} config file... "
kubectl create -f statefulsets/consul.yaml 2>&1 >/dev/null
print -P "%F{green}done.%F{$color}"

print -nP "Waiting for consul cluster to elect a leader... "
until kubectl logs consul-0 2>/dev/null | grep -q "New leader elected"
do
  sleep 5
done 2>&1 >/dev/null
print -P "%F{green}done.%F{$color}"

kubectl port-forward consul-0 8500:8500 2>&1 >/dev/null &

sleep 20 # For port-forwarding to setup

print -nP "Boostrapping consul cluster... "
ACL_MASTER_TOKEN=$(curl -s --request PUT http://127.0.0.1:8500/v1/acl/bootstrap 2>/dev/null | jq -r '.ID')
print -P "%F{green}done.%F{$color}"
print -P "%F{yellow}ACL_MASTER_TOKEN%F{$color}=%F{magenta}$ACL_MASTER_TOKEN%F{$color}"

print -nP "Creating vault consul token with acl from %F{yellow}acls/vault.json%F{$color}... "
VAULT_CONSUL_TOKEN=$(curl \
  -s \
  --request PUT \
  --header "X-Consul-Token: $ACL_MASTER_TOKEN" \
  --data @acls/vault.json \
  http://127.0.0.1:8500/v1/acl/create 2>/dev/null | jq -r '.ID')
print -P "%F{green}done.%F{$color}"
print -P "%F{yellow}VAULT_CONSUL_TOKEN%F{$color}=%F{magenta}$VAULT_CONSUL_TOKEN%F{$color}"

print -nP "Creating vault-consul-key secret from previously created %F{yellow}VAULT_CONSUL_TOKEN%F{$color}... "
kubectl create secret generic vault-consul-key --from-literal="consul-key=$VAULT_CONSUL_TOKEN" 2>&1 >/dev/null
print -P "%F{green}done.%F{$color}"

print -nP "Creating an agent token with acl from %F{yellow}acls/agent.json%F{$color}... "
ACL_AGENT_TOKEN=$(curl \
  -s \
  --request PUT \
  --header "X-Consul-Token: $ACL_MASTER_TOKEN" \
  --data @acls/agent.json \
  http://127.0.0.1:8500/v1/acl/create 2>/dev/null | jq -r '.ID')
print -P "%F{green}done.%F{$color}"
print -P "%F{yellow}ACL_AGENT_TOKEN%F{$color}=%F{magenta}$ACL_AGENT_TOKEN%F{$color}"

print -P "Setting acl_agent_token from previously created %F{yellow}ACL_AGENT_TOKEN%F{$color}"
print -nP "  %F{grey}consul-0%F{$color}... "
curl \
  -s \
  --request PUT \
  --header "X-Consul-Token: $ACL_MASTER_TOKEN" \
  --data "{ \"Token\": \"$ACL_AGENT_TOKEN\" }" \
  http://127.0.0.1:8500/v1/agent/token/acl_agent_token 2>&1 >/dev/null
print -P "%F{green}done.%F{$color}"

kill $!

kubectl port-forward consul-1 8500:8500 2>&1 >/dev/null &

sleep 20

print -nP "  %F{grey}consul-1%F{$color}... "
curl \
  -s \
  --request PUT \
  --header "X-Consul-Token: $ACL_MASTER_TOKEN" \
  --data "{ \"Token\": \"$ACL_AGENT_TOKEN\" }" \
  http://127.0.0.1:8500/v1/agent/token/acl_agent_token 2>&1 >/dev/null
print -P "%F{green}done.%F{$color}"

kill $!

kubectl port-forward consul-2 8500:8500 2>&1 >/dev/null &

sleep 20

print -nP "  %F{grey}consul-2%F{$color}... "
curl \
  -s \
  --request PUT \
  --header "X-Consul-Token: $ACL_MASTER_TOKEN" \
  --data "{ \"Token\": \"$ACL_AGENT_TOKEN\" }" \
  http://127.0.0.1:8500/v1/agent/token/acl_agent_token
print -P "%F{green}done.%F{$color}"

print -nP "Updating anonymous token acl from %F{yellow}acls/anonymous.json%F{$color}... "
curl \
  -s \
  --request PUT \
  --header "X-Consul-Token: $ACL_MASTER_TOKEN" \
  --data @acls/anonymous.json \
  http://127.0.0.1:8500/v1/acl/create 2>&1 >/dev/null
print -P "%F{green}done.%F{$color}"

kill $!

print -nP "Creating vault secret from generated vault generated certificates... "
cp vault.pem vault.pem.bak
cat vault.pem.bak ca.pem > vault.pem
kubectl create secret generic vault \
  --from-file=vault.pem \
  --from-file=vault-key.pem 2>&1 >/dev/null
print -P "%F{green}done.%F{$color}"

print -nP "Using %F{yellow}ACL_AGENT_TOKEN%F{$color} to create consul-agent-token secret... "
echo "{ \"acl_agent_token\": \"$ACL_AGENT_TOKEN\" }" > acl_agent_token.json
kubectl create secret generic consul-agent-token --from-file=acl_agent_token.json 2>&1 >/dev/null
print -P "%F{green}done.%F{$color}"

print -nP "Creating vault service from %F{yellow}services/vault.yaml%F{$color} file... "
kubectl apply -f services/vault.yaml 2>&1 >/dev/null
print -P "%F{green}done.%F{$color}"

print -nP "Creating vault statefulset from %F{yellow}statefulsets/vault.yaml%F{$color} config file... "
kubectl apply -f statefulsets/vault.yaml 2>&1 >/dev/null
print -P "%F{green}done.%F{$color}"

print -nP "Waiting for first vault node to be ready... "
until kubectl logs vault-0 vault 2>/dev/null | grep -q "Log data will stream in below"
do
  sleep 5
done 2>&1 >/dev/null
print -P "%F{green}done.%F{$color}"

kubectl port-forward vault-0 8200:8200 2>&1 >/dev/null &

sleep 20

print -nP "Initializing first vault node and retrieving unseal key and initial root token... "
vault operator init -key-shares=1 -key-threshold=1 -tls-skip-verify 1>stdout 2>stderr
print -P "%F{green}done.%F{$color}"

UNSEAL_KEY=$(cat stdout | grep "Unseal Key" | sed -E 's/Unseal Key 1: (.*)/\1/')

VAULT_ROOT_TOKEN=$(cat stdout | grep "^Initial Root Token" | sed -E 's/Initial Root Token: (.*)/\1/')
export VAULT_TOKEN=$VAULT_ROOT_TOKEN


sleep 5

print -nP "Unsealing first vault... "
vault operator unseal -tls-skip-verify $UNSEAL_KEY 2>&1 >/dev/null
print -P "%F{green}done.%F{$color}"

kill $!

print -nP "Waiting for second vault node to be ready... "
until kubectl logs vault-1 vault 2>/dev/null | grep -q "Log data will stream in below"
do
  sleep 5
done 2>&1 >/dev/null
print -P "%F{green}done.%F{$color}"

kubectl port-forward vault-1 8200:8200 2>&1 >/dev/null &

sleep 20

print -nP "Unsealing second vault... "
vault operator unseal -tls-skip-verify $UNSEAL_KEY 2>&1 >/dev/null
print -P "%F{green}done.%F{$color}"

kill $!

print -P "All vaults unsealed and ready."
print -P "%F{yellow}VAULT_TOKEN%f=%F{magenta}$VAULT_ROOT_TOKEN%F{$color}"
print -P "%F{yellow}UNSEAL_KEY%f=%F{magenta}$UNSEAL_KEY%F{$color}"

print -nP "Setting up consul dns by updating kube-dns to use consul ips... "
CONSUL_IPS=$(kubectl describe pods consul | grep "^IP" | sed -E 's/^.* ([0-9].+)$/"\1:8600"/'  | paste -sd "," -)
cat configmaps/kube-dns.yaml | sed "s/CONSUL_IPS/$CONSUL_IPS/" > tmp/kube-dns.yaml
kubectl apply -f tmp/kube-dns.yaml
print -P "%F{green}done.%F{$color}"

print -nP "Creating service accounts for letsencrypt-vault-manager and nginx... "
kubectl -n default create serviceaccount vault-nginx
kubectl -n default create serviceaccount letsencrypt-vault-manager
print -P "%F{green}done.%F{$color}"

kubectl port-forward vault-0 8200:8200 2>&1 >/dev/null &

sleep 20

print -nP "Configuring k8s auth backend in vault for this cluster... "
vault-k8s-config -tls-skip-verify
print -P "%F{green}done.%F{$color}"

print -nP "Configuring secret secret backend in vault for this cluster... "
vault-aws-config -tls-skip-verify
print -P "%F{green}done.%F{$color}"

VAULT_USER="vault-$VAULT_CLUSTER"

sed -E "s#HOSTED_ZONE_ID#${HOSTED_ZONE_ID[1,99]}#" \
  aws-policies/letsencrypt-vault-manager.json > /tmp/letsencrypt-vault-manager.json
ARN=$(aws iam create-policy --policy-name "letsencrypt-vault-manager-$VAULT_CLUSTER" \
  --policy-document file:///tmp/letsencrypt-vault-manager.json |
  jq -r '.Policy.Arn')
aws iam attach-user-policy --user-name "$VAULT_USER" \
  --policy-arn $ARN
vault write -tls-skip-verify $VAULT_AWS_PATH/roles/letsencrypt-vault-manager \
  policy=@/tmp/letsencrypt-vault-manager.json

print -nP "Creating letsencrypt-vault-manager role... "
vault write -tls-skip-verify sys/policy/certs_all_access policy=@policies/certs_all_access.hcl
vault write -tls-skip-verify sys/policy/certbot_readonly policy=@policies/certbot_readonly.hcl
sed -E "s/CLUSTER_NAME/$CLUSTER_NAME/" \
  policies/aws-letsencrypt-vault-manager.hcl > /tmp/aws-letsencrypt-vault-manager.hcl
vault write -tls-skip-verify sys/policy/aws-letsencrypt-vault-manager \
  policy=@/tmp/aws-letsencrypt-vault-manager.hcl
vault write -tls-skip-verify auth/$VAULT_K8S_PATH/role/letsencrypt-vault-manager \
  bound_service_account_names=letsencrypt-vault-manager \
  bound_service_account_namespaces=default \
  policies=certs_all_access,certbot_readonly,aws-letsencrypt-vault-manager \
  ttl=30m
print -P "%F{green}done.%F{$color}"

kill $!

print -P "Creating letsencrypt-vault-manager for handling ssl certificate "
print -nP "creation and renewal... "
kubectl apply -f deployments/letsencrypt-vault-manager.yaml
kubectl apply -f services/letsencrypt-vault-manager.yaml
print -P "%F{green}done.%F{$color}"

print -nP "Waiting for letsencrypt-vault-manager to be running..."
until kubectl get pods | grep "^letsencrypt" | grep -q Running
do
  sleep 5
done
sleep 5
print -P "%F{green}done.%F{$color}"

host_for_certification=$(kubectl get svc -o json letsencrypt-vault-manager |
  jq -r '.status.loadBalancer.ingress[0].hostname')

kubectl port-forward vault-0 8200:8200 2>&1 >/dev/null &

sleep 20

vault write -tls-skip-verify secret/certbot \
  email=$email \
  host=$host_for_certification \
  hosted_zone_id=$HOSTED_ZONE_ID

print -nP "Certifying domain %F{yellow}$VAULT_HOST%F{$color} using let's encrypt ..."
kubectl get pods | grep "^letsencrypt" | sed -E 's/^([^ ]+).*/\1/' | xargs -I {} kubectl exec -t {} certify $VAULT_HOST
print -P "%F{green}done.%F{$color}"

print -P "Creating nginx load balancer with ssl termination for external host %F{yellow}$VAULT_HOST%F{$color}"
vault write -tls-skip-verify sys/policy/certs_readonly policy=@policies/certs_readonly.hcl
vault write -tls-skip-verify auth/$VAULT_K8S_PATH/role/vault-nginx \
  bound_service_account_names=vault-nginx \
  bound_service_account_namespaces=default \
  policies=certs_readonly \
  ttl=30m
cat configs/nginx.conf | sed -E "s/VAULT_HOST/$VAULT_HOST/" > tmp/nginx.conf
cat configs/consul-template.hcl | sed -E "s/VAULT_HOST/$VAULT_HOST/" > tmp/config.hcl
kubectl create configmap consul-template-config --from-file tmp/config.hcl
kubectl create configmap nginx-config --from-file tmp/nginx.conf 2>&1 >/dev/null
kubectl apply -f deployments/nginx.yaml 2>&1 >/dev/null
kubectl apply -f services/nginx.yaml 2>&1 >/dev/null
print -P "%F{green}done.%F{$color}"

print -P "Waiting a few seconds for the load balancer to obtain an external host... "
sleep 15
ELB_HOSTNAME=$(kubectl get svc -o json nginx | jq -r '.status.loadBalancer.ingress[0].hostname')
print -P "%F{yellow}ELB_HOSTNAME%F{$color}=%F{magenta}$ELB_HOSTNAME%F{$color}"
print -nP "Redirecting $VAULT_HOST to $ELB_HOSTNAME..."
redirect_subdomain $VAULT_HOST. $ELB_HOSTNAME.
print -P "%F{green}done.%F{$color}"
print
print -P "Summary:"
print -P " - 3 pods HA consul cluster"
print -P " - 2 pods HA vault cluster"
print -P " - 2 pods nginx for external load balancing and ssl termination"
print -P " - root ca and certificates for internal communication between pods"
print -P " - public certificates for accessing the vault cluster through nginx"
print
print -P "You should now point $VAULT_HOST to the nginx elb: $ELB_HOSTNAME."
print
print -P "The following data should be saved somewhere safe:"
print -P "%F{yellow}ACL_MASTER_TOKEN%F{$color}=%F{magenta}$ACL_MASTER_TOKEN%F{$color}"
print -P "%F{yellow}ACL_AGENT_TOKEN%F{$color}=%F{magenta}$ACL_AGENT_TOKEN%F{$color}"
print -P "%F{yellow}VAULT_CONSUL_TOKEN%F{$color}=%F{magenta}$VAULT_CONSUL_TOKEN%F{$color}"
print -P "%F{yellow}GOSSIP_ENCRYPTION_KEY%F{$color}=%F{magenta}$GOSSIP_ENCRYPTION_KEY%F{$color}"
print -P "%F{yellow}VAULT_TOKEN%f=%F{magenta}$VAULT_ROOT_TOKEN%F{$color}"
print -P "%F{yellow}UNSEAL_KEY%f=%F{magenta}$UNSEAL_KEY%F{$color}"
print -P "%F{yellow}ELB_HOSTNAME%F{$color}=%F{magenta}$ELB_HOSTNAME%F{$color}"

popd
